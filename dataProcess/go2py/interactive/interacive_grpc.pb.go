// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package interactive

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProcessDataClient is the client API for ProcessData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProcessDataClient interface {
	SetData(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataReply, error)
	OnProcessResult(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataReply, error)
}

type processDataClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessDataClient(cc grpc.ClientConnInterface) ProcessDataClient {
	return &processDataClient{cc}
}

func (c *processDataClient) SetData(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataReply, error) {
	out := new(DataReply)
	err := c.cc.Invoke(ctx, "/interactive.ProcessData/SetData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processDataClient) OnProcessResult(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataReply, error) {
	out := new(DataReply)
	err := c.cc.Invoke(ctx, "/interactive.ProcessData/OnProcessResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProcessDataServer is the server API for ProcessData service.
// All implementations must embed UnimplementedProcessDataServer
// for forward compatibility
type ProcessDataServer interface {
	SetData(context.Context, *DataRequest) (*DataReply, error)
	OnProcessResult(context.Context, *DataRequest) (*DataReply, error)
	mustEmbedUnimplementedProcessDataServer()
}

// UnimplementedProcessDataServer must be embedded to have forward compatible implementations.
type UnimplementedProcessDataServer struct {
}

func (UnimplementedProcessDataServer) SetData(context.Context, *DataRequest) (*DataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetData not implemented")
}
func (UnimplementedProcessDataServer) OnProcessResult(context.Context, *DataRequest) (*DataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnProcessResult not implemented")
}
func (UnimplementedProcessDataServer) mustEmbedUnimplementedProcessDataServer() {}

// UnsafeProcessDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcessDataServer will
// result in compilation errors.
type UnsafeProcessDataServer interface {
	mustEmbedUnimplementedProcessDataServer()
}

func RegisterProcessDataServer(s grpc.ServiceRegistrar, srv ProcessDataServer) {
	s.RegisterService(&ProcessData_ServiceDesc, srv)
}

func _ProcessData_SetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessDataServer).SetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interactive.ProcessData/SetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessDataServer).SetData(ctx, req.(*DataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessData_OnProcessResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessDataServer).OnProcessResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interactive.ProcessData/OnProcessResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessDataServer).OnProcessResult(ctx, req.(*DataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProcessData_ServiceDesc is the grpc.ServiceDesc for ProcessData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProcessData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "interactive.ProcessData",
	HandlerType: (*ProcessDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetData",
			Handler:    _ProcessData_SetData_Handler,
		},
		{
			MethodName: "OnProcessResult",
			Handler:    _ProcessData_OnProcessResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interacive.proto",
}
